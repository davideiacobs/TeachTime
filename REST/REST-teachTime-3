LOGIN UTENTE
URL: /auth/login
VERBO: POST
prende in input un oggetto contenente mail e password di un utente e restituisce un oggetto contenente il relativo token di sessione/autenticazione.




LOGOUT UTENTE 
URL: /auth/logout
VERBO: POST
Prende in input un token di sessione/autenticazione e chiude la relativa sessione, invalidando il token




INSERIMENTO NUOVO UTENTE NEL SISTEMA:  (fatto)
URL: /users
VERBO: POST
Inserisce un nuovo utente nel sistema. L’oggetto passato come payload conterrà tutti i dati del profilo utente, ad esempio:
{
	"nome":"pinco", 
	"cognome":"pallino", 
	"email":"pp@gmail.it",
	"pwd":"abcdef",
	"dataDiNascita":"1995-04-27",
	"città":"Roma",
	"telefono":3456789012,
	"titoloDiStudi":"Laurea Base in Informatica",
	"imgProfilo":"profilo.png"
}





ESTRAZIONE UTENTE PER CHIAVE:  (fatto --> problema: data di nascita utente in timestamp)
URL: /users/{ID}
VERBO: GET
Restituisce il profilo dell’utente {ID} sotto forma dello stesso oggetto utilizzato come payload per l’inserimento (POST) tramite la URL 
/users, ad esclusione della password.




AGGIORNAMENTO PROFILO UTENTE (città,telefono,titolo di studio) PER CHIAVE:     (fatto)
URL: /users/{ID}
VERBO: PUT
Aggiorna il profilo dell’utente {ID}. Il payload è lo stesso oggetto utilizzato per l’inserimento (POST) tramite la URL /users eccetto: nome,cognome,email,pwd,dataDiNascita.




INSERIMENTO RIPETIZIONE:  (fatto)
URL: /repetitions 
VERBO: POST
Inserisce una nuova ripetizione nel sistema. L'oggetto passato come payload conterrà tutti i dati della ripetizione, ad esempio:
{
    "tutor_key":1,
	"città":"roma",
	"luogoIncontro":"a scelta dello studente",
	"costo":12,
	"descr":"top",
	"categoria_key":1,
	"materie":[
                          {
                           	"nome":"programmazione python",
                           	"categoria_key":1
			  },
                          {
                          	"nome":"database",
                          	"categoria_key":1
			  }
	]
}



ESTRAZIONE RIPETIZIONE PER CHIAVE:   (fatto --> problema: data di nascita tutor in timestamp)
URL: /repetitions/{ID}
VERBO: GET
Restituisce le informazioni relative alla ripetizione {ID} sotto forma dello stesso oggetto utilizzato come payload dell'inserimento (POST) tramite la url /repetitions.

ex:

    {
        "key": 17,
        "luogoIncontro": "a scelta dello studente",
        "costo": 12,
        "descr": "top",
        "città": "roma",
        "tutor":
        {
            "key": 1,
            "nome": "pinco",
            "cognome": "pallino",
            "email": "pp@gmail.it",
            "pwd": "abcdef",
            "città": "Roma",
            "telefono": "3456789012",
            "dataDiNascita": 798933600000,
            "titoloDiStudi": "Laurea Base in Informatica",
            "imgProfilo": "profilo.png"
        },
        "tutor_key": 1,
        "materie":
        [
            {
                "key": 1,
                "nome": "programmazione python",
                "categoria":
                {
                    "key": 1,
                    "nome": "informatica"
                },
                "categoria_key": 1
            }
        ]
    }




AGGIORNAMENTO RIPETIZIONE PER CHIAVE (prezzo/ora,descrizione,luogo incontro, lista argomenti):  (fatto)
URL: /repetitions/{ID}
VERBO: PUT
Aggiorna le informazioni relative alla ripetizione {ID}. Il payload è lo stesso oggetto utilizzato come payload dell'inserimento (POST) tramite la url /repetitions, ad esclusione di tutor.




LISTA RIPETIZIONI PER CHIAVE TUTOR:   (fatto)
URL: /repetitions?{tutor_ID}
VERBO: GET
Restituisce la lista di URI che rappresentano tutte le ripetizioni con informazioni associate al tutor {tutor_ID} presenti nel sistema.




CANCELLAZIONE RIPETIZIONE PER CHIAVE:  (fatto)
URL: /repetitions/{ID}
VERBO: DELETE
Elimina la ripetizione {ID}.



LISTA RIPETIZIONI PER MATERIA E CITTA' (ed eventualemente per argomento):    (fatto)
URL: /repetitions?{CITY}&{CATEGORY}&[{SUBJECT}]
VERBO: GET 
Restituisce la lista delle URI che rappresentano tutte le ripetizioni presenti nel sistema, includendo solo quelle con informazioni associate alla città e alla materia specificate in {CITY} e in {SUBJECT}. La lista può essere ulteriormente filtrata tramite il parametro aggiuntivo {CATEGORY} che può indicare uno specifico argomento che deve essere presente nella lista di argomenti contenuta nella ripetizione.




INSERIMENTO PRENOTAZIONE:    (fatto --> problema data:orario non memorizzato su db)
URL: repetitions/{repetition_ID}/bookings
VERBO: POST
Inserimento nel sistema di una nuova prenotazione alla ripetizione {repetition_ID}. L'oggetto passato come payload conterrà tutti i dati della prenotazione, ad esempio:

{
	"data":"2007-09-25T15:40:51",  (deve contenere anche l'ora)
	"materia_key":2,
	"stato":0,
    "descr":"ripetizione descrizione",
    "studente_key":1
}



AGGIORNAMENTO PRENOTAZIONE:    (fatto)
URL: repetitions/{repetition_ID}/bookings
VERBO: PUT
Aggiornamento dello stato ed eventualmente del voto e della recensione. --> serve a inserire il feedback relativo alla ripetizione effettuata




ESTRAZIONE PRENOTAZIONI PER CHIAVE STUDENTE:  (fatto)
URL: users/{ID}/bookings
VERBO: GET
Restituisce le informazioni relative alla prenotazione con {ID} sotto forma dello stesso oggetto utilizzato come payload dell'inserimento (POST) tramite la url /repetitons/{repetition_ID}/bookings.




LISTA FEEDBACK RICEVUTI DA UN TUTOR:
URL: /users/{ID}/feedbacks
VERBO: GET
Restituisce la lista delle URI che rappresentano tutti i feedback ricevuti dal tutor {tutor_ID}.




/*INSERIMENTO FEEDBACK:
URL: /users/{ID}/feedbacks
VERBO: POST
Inserimento nel sistema di un nuovo feedback ricevuto dal tutor {tutor_ID}. L'oggetto passato come payload conterrà tutti i dati del feedback, ad esempio:
{
	"ID":345,
	"uri_studente": "...",                        
	"ripetizione":{
			"tutor": {
				"tutor_ID":123,
				"nome":"...", 
				"cognome":"...", 
				"email":"...",
				"uri_tutor":...
			},
			"città":"...",
			"luogoDiIncontro":"...",
			"prezzoPerOra":12
	},
	"data":"21-05-2017",
	"ora":"16:30",
	"materia":"...",
	"stato":0
}
*/





ESTRAZIONE VOTO MEDIO TUTOR:
URL: /users/{ID}/feedbacks/vote
VERBO: GET
Calcola e restituisce il voto medio dell'utente a partire dai voti contenuti in ogni feedback da esso ricevuto.







RECUPERO LISTA MATERIE PER CATEGORIA (fatto) :
URL: /categories/{ID}/subjects
VERBO: GET









